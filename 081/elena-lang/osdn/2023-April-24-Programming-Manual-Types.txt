=== 型

プログラミングにおいてデータ型 (または一般に型) は数値、テキストなどのデータに関する役割を定義します。オブジェクト指向において、この概念はデータと処理内容をカプセル化したクラスにより拡張されます。データの格納先はフィールドとなり処理内容はメソッドにより実行されます。 ELENA において型とクラスはほぼ同義であるため意味を損なうことなく同じもの (interchangeably) として使用できます (基本型を除く)。クラスは継承をもとに階層を形成します。つまり、クラスごとに親クラスと単体の親クラスがあります (最上位クラスである '''system'Object''' を除く)。

プログラミング言語の型システムには静的型付けと動的型付けがあります。オブジェクト指向プログラミング (OOP) において、静的型付けに関する特定の問題を修正するために、クラスには多態性を持たせることができます。動的型付け言語は実行時に型解決を行います。これは処理性能に悪影響を及ぼします。そのため、現代的なプログラミング言語では静的型付けと動的型付けを組み合わせることで、この問題の解決する試みがあります。 ELENA は動的型付け言語であるため実行時に型解決を行います。つまり、明確な型を一切指定せずにプログラムを記述できます。しかしながら、通常時はコードに関する可読性の向上や処理性能の改善するために型は必ず指定してください。

通常、動的言語におけるメソッドの呼び出し処理はメッセージの送信と呼ばれています。クラスにおけるメッセージの応答として該当するメソッド (同じ名前とシグニチャの使用) を呼び出します。通常時、メソッドテーブルから該当するハンドラを検索することで処理します。この処理には時間を要します。この問題を解決するために ELENA では '''Sealed''' (密閉) または '''Closed''' (閉鎖) クラスを宣言できます。 Sealed クラスのメソッドはコンパイル時にメソッドテーブルを利用せずに解決を行うことで直接呼び出します。Closed クラス (またはインターフェイス) のメソッドはコンパイル時にメソッドテーブルを利用して解決します。ただし、 Sealed クラスは継承できません。インターフェイスは継承可能ですが新規メソッドは宣言できません (プライベートメソッドは除く)。

ELENA における型キャストは専用メソッドである変換ハンドラを送信することで実装します。このメッセージをクラスごとに処理することで別のクラスへ変換できます。それ以外は例外が発生します。

----

この記事は [https://github.com/ELENA-LANG/elena-lang/wiki/ELENA-Programming-Manual ELENA Programming Manual (2023-March-06 rev. 213)] の邦訳です。

使用許諾条件は ELENA 言語に従うものとします。
