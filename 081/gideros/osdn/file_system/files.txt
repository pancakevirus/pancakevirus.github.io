= ファイルシステム
|| [file_system/intro はじめに] || [file_system/resource リソースディレクトリ] || [file_system/document ドキュメントディレクトリ] || [file_system/temp テンポラリディレクトリ] ||
|| [file_system/files 実行順序] || [file_system/strict strict.lua] || || ||

== Lua のファイルと実行順序
通常、 Gideros はプレイヤーおよび実際のアプリケーションともに Lua ファイルをすべて実行します。

実行順序は非常に無作為なものでありますが、前提条件として二種類のファイルに関しては実行順序が保証されています:

 ➜ '''init.lua''' は必ず最初に 実行されます。

 ➜ '''main.lua''' は必ず最後に実行されます


'''従って最善の実践方法は:'''

 ➜ 既存クラスの全機能と変更を '''init.lua''' へ追加します。

 ➜ アプリケーションなどの初期化を '''main.lua''' で行ってください (既に他のソースコードが読み込まれている場合)。

 ➜ その他すべての Lua ファイルのスコープ内にある関数をコードでラップします。

それでも、 シーンマネージャーの表示またはオブジェクトをいずれかクラス表現して Gideros のクラスを Lua ファイルごとに分割して作成することは良い習慣ですが、これらのファイルにあるプレーンコードを '''main.lua''' だけに限定して実行しないでください。


'''もちろん、全ての実行順序は設定することができます。'''

アセットライブラリにある Lua ファイルは全ての一つずつ実行されます。 Gideros アプリケーションの開始前に Lua ファイル間のコード依存関係を設定することで、実行順序を変更することもできます。

Lua ファイルを右クリックしてポップアップメニューから“Code Dependencies...”(コードの依存関係...) を選択すると “Code Dependencies”(コードの依存関係) のダイアログが開きます:

[[Embed(code_dependencies_1.png, float=checked, caption=コードの依存関係 図.1)]]

このメニューでは、 Lua ファイル間における依存関係を設定することができます。例えば、 '''a.lua''' が '''b.lua''' に依存する場合は、 '''b.lua''' は '''a.lua''' の前に必ず実行されます。

“Call Order”(呼び出し順) のタブを選択すると、実行順序の確認を行うことができます:

[[Embed(code_dependencies_2.png, float=checked, caption=コードの依存関係 図.2)]]

'''注釈:''' '''main.lua''' および '''init.lua''' のファイル名は特別な意味があります。アプリケーション開始時、 Gideros ランタイムは最初に '''init.lua''' を、最後に '''main.lua''' を実行します。

----
Copyright(C)!GiderosMobile.com / Japanese translation by. isVowel

利用条件は Gideros のライセンスに従うものとします。
